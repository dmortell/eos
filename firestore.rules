rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    	// allow read, write;
      // allow read, write: if request.auth.token.email.matches('david.mortell@eiresystems.com') && request.auth.token.email_verified;
      // allow read, write: if request.auth != null;

    match /companies/{companyId} {
      allow read: if isSignedIn() && userBelongsToCompany();
      allow update, delete: if companyAdmin()
    }

    match /teams/{teamId} {
      allow read: if isSignedIn() && adminOrEmployee();
      allow create: if userAndAdmin();
      allow update, delete: if companyAdmin()
    }

    match /employees/{employeeId} {
      allow read: if isSignedIn() && userBelongsToCompany();
      allow create: if userAndAdmin();
      allow update, delete: if companyAdmin()
    }
  }

  function isSignedIn() {
    return (request.auth.uid != null)
  }

  function userIsAdmin() {
    return request.auth.token.role == 'admin'
  }
	// https://firebase.google.com/docs/firestore/solutions/role-based-access?authuser=0
	// roles: { alice: "owner", bob: "reader", david: "writer", jane: "commenter" }
	// function getRole(rsc) { return rsc.data.roles[request.auth.uid]; }	// get user role from roles map in document rsc
	// function isOneOfRoles(rsc, array) { return isSignedIn() && (getRole(rsc) in array); }

	// admin.auth().setCustomUserClaims(uid, {role:'admin'}).then(() => {});		// set role (delete by passing null)
	// admin.auth().verifyIdToken(idToken).then((claims) => { if (claims.role=='admin'){} });		// verify role
	// admin.auth().getUser(uid).then((userRecord) => { console.log(userRecord.customClaims['role']); });		// lookup user

  function userBelongsToCompany() {
    return request.auth.token.companyId == resource.data.companyId
  }

  function userAndAdmin() {
    return isSignedIn() && userIsAdmin()
  }

  function companyAdmin() {
    return userAndAdmin() && userBelongsToCompany()
  }

  function adminOrEmployee() {
    return userBelongsToCompany() && (userIsAdmin() || resource.data.id == request.auth.uid)
  }

  function adminOrOwner() {
    return userBelongsToCompany() && (userIsAdmin() || resource.data.employeeId == request.auth.uid)
  }

  function notCreator() {
    return resource.data.status != 'creator'
  }
}